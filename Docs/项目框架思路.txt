我在使用Quarters开发FPGA，具体是用于与stm32单片机通过FSMC（异步复用模式）来通信的，MCU向FPGA发送各种命令以完成各种任务，比如读取ADC、进行FFT等。
同时，由于我的项目开发使用的一直是同一套实验平台，也就是说stm32单片机和FPGA以及通信方式不变，变的是执行的任务。也就是说FSMC接口模块是不变的，变的只有与FSMC接口模块连接的模块。
因此，我完全可以只建立一个工程，再创建一个目录，这个目录用于存放各种独立模块，对于不同项目，我只要再顶层文件让需要用到的模块与FSMC接口模块相连即可，而不必像以前那样，
每开发一个项目就再创建一个新的工程并重新写模块。而且这样可以达到像单片机那样模块化开发，并且模块复用。

前面提到，FPGA是根据MCU发送的信息执行不同任务的，现在我有个想法，把MCU发送的信息分成命令型指令和数据型指令两种。
此时我要说明一下这里使用到的FSMC协议是异步且地址数据线复用，数据线是16根，地址线只用到了18根。那么命令式指令和数据型指令可以通过最高的2根地址线作为片选来区分。
比如数据型指令的片选定为0x00，命令型指令的片选定为0x01。所谓数据型指令，就是说此时FPGA相当于一个存储器或者寄存器，MCU可以通过不同地址来访问到不同的数据，也就是说MCU发送地址后，然后读取数据。
而命令型指令，就是MCU发送一些命令，FPGA来执行任务。不同的地址代表不同的任务，发送同一个地址后，然后MCU再发送数据信息，FPGA根据这个数据来执行。
比如MCU先发送0x00_0001，而在FPGA里这个地址表示的设置频率字，接着MCU再写入数据来设置不同频率字。也就是说MCU发送地址后，然后写入数据。

现在FPGA的功能也理清了，为了能让模块复用，我想到的是FSMC接口模块用于解析MCU的FSMC协议，然后再转为不同独立模块能够“听懂”的内部协议，也就是说不同的独立模块要有相同的接口列表。
这样就可以保证MCU发送不同指令时，FSMC接口模块解析成相同的格式的信息，再让对应的模块来执行。那么就需要一个多路选择器，
比如MCU发送一个地址信息是用于读取ADC（地址信息是由FPGA决定的），那么经过FSMC接口模块解析，判断出要启用读取ADC模块，那么就发送片选信息给多路选择器，
来让FSMC接口模块可以通过多路选择器来与读取ADC模块通信，确保同一时间内，FSMC接口模块只与一个独立模块通信。

关于这个协议，我没怎么想好，现在不成熟的想法是：
由于MCU与FPGA的通信是双向的，而且MCU对于同一地址可以有读写两种操作，那么FSMC接口模块需要留一根线wr用于供独立模块判断是读还是写，如果是高电平，那么就表明FPGA需要写入数据到MCU中，也就是独立模块需要写入数据到FSMC接口模块。
由于地址线的高两位已经被分成两种命令，一种是存储器类型，一种是命令式类型，那么这两根线可以连接到多路选择器上（不能省为一根线），通过这个高位片选来让FSMC接口模块与FIFO或者独立模块来通信。
那么地址线的低16根线，就可以用来连接多路选择器，由于一个项目用到的独立模块并不多，可以只用其中的地3位线，来片选不同独立模块。
同时为了让独立模块设计的简单一点，就不使用地址数据复用了，也就是说独立模块需要16根输入数据线和16根输出数据线，那么FSMC接口就需要给出输入数据端口data_in和输出数据端口data_out。
由于多路选择器并不知道什么时候是FPGA接受到了命令，那么就需要FSMC接口模块再给出一根线en，高电平表示MCU已经发送信息了。
独立模块由于已经通过多路选择器来片选，通过片选信号可以知道自己是否要被启用，那么独立模块就不需要别的信号线。现在整理一下，独立模块需要16根输入数据线（与FSMC接口模块相连）和16根输出数据线（与多路选择器相连）、一根片选线cs（与多路选择器相连）和一根读写判断线wr（直连FSMC接口模块）
FSMC接口模块对内部暴露的接口就需要18根地址数据输出线和16根数据输入线，其中地址数据输出线由于地址数据复用，18根地址数据输出线与多路选择器相连，
其中低16位地址数据输出线又可以与独立模块相连，因为独立模块再FSMC接口模块读取地址时是不启用的，所以不会干扰。而FSMC接口模块的16根数据输入线可以与多路选择器相连，由多路选择器来控制哪些模块可以输出到FSMC接口模块中。
你觉得这样的内部协议的设计是否合理，有哪些改进的地方？


【submodule】：子模块，与fsmc接口模块相连的子模块
【interface】：与外部相连的接口模块
【internal】：内部模块，既不是与fsmc接口模块相连的子模块，也不是与外部相连的接口模块，而是纯在FPGA内部发挥的内部模块
