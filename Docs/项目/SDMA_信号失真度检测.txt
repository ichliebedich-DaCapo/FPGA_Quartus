Signal Distortion Measurement Apparatus
【算法】
    检测周期：
        普通方法：去直流（预处理） -> 过零检测法
        高级方法：

    采集1024个点，分频器主频为24MHz（48MHz），采样频率至少应满足：
        区间范围    采样率          分频系数
        [1K,2K)     24K             1000
        [2K,4K)     48K             500
        [4K,8K)     96K             250
        [8K,16K)    192K            125
        [16K,32K)   384K->400K      62.5->60
        [32K,64K)   768K->800K      31.25->30
        [64K,128K)  1536K->1600K    15.625->15





【程控模块】
    ADS805与FPGA相连，输入信号（30mV~600mV）经过二级程控放大器后与ADS805相连（峰峰值范围为2V，不用考虑偏置）。
程控放大器由继电器控制，一级放大倍数为1和4.5倍，二级放大倍数为3和6.5，因此我需要设计一个程控模块(System Verilog)根据ADC的电压来自动控制继电器。
为了方便调控，把电压范围分成四个区间，左边是输入区间，中间是处在对应增益倍数[29.250000 13.500000 6.500000 3.000000]下的区间范围，单位都是mV，右边是继电器的档位
    输入信号峰峰值               增益后信号峰峰值           增益倍数对应的档位
[30.000000,64.814815]		[877.500000,1895.833333]            2'b11
[64.814815,134.615385]		[875.000000,1817.307692]            2'b10
[134.615385,291.666667]		[875.000000,1895.833333]            2'b01
[291.666667,600.000000]		[875.000000,1800.000000]            2'b00
    如果ADC电压高于1925mv，那么立即调低增益(过载保护)。低于1925mV的话，那么就检测512个ADC数据，如果这段时间内的峰峰值大于对应增益区间的上限，那么就调低增益，如果低于对应增益区间的下限，那么就增加增益。
    此外，如果连续多次检测档位都未变，那么就可以输出稳定信号（stable为高电平）dmpk
模块接口列表如下：
module auto_gain_control (
    input adc_clk,
    input rst_n,
    input [11:0] adc_data,// 上升沿时可读，读取的12位二进制数据
    output reg [1:0] gain_ctrl,// 实际程控增益
    output reg stable// 稳定信号，用于通知其他模块
);

    

// 不稳定的情况下，使用200KHz进行采样。那么完整一个周期就是10到1000个，咱就取1024个判断一次


【ADC采样模块】
    我需要你使用System Verilog编写一个12位高速并行ADC采样模块，这个模块与ADS805相连，从ADS805获取数据后，再把数据输出即可。它是一直工作的
module adc_interface (
    input  logic        adc_clk,    // ADC时钟输入
    input  logic        rst_n,      // 异步复位，低电平有效
    input  logic [11:0] ADC_DATA,   // ADC数据总线
    output logic [11:0] DATA_OUT,   // 同步输出数据
    output logic        ADC_OE  // ADS805输出使能信号，低电平使能
);



【频控模块】
    我需要设计一个FPGA的模块用于调控采样率，输入信号为1K~100K，其中1K~10K区间对应的采样率是200K，10K~100K对应的采样率是2M。模块接口有adc_clk和adc_data[11:0]这两个输入引脚，
在adc_clk下降沿时，adc_data数据有效。除了adc_clk外，还有200M的主时钟clk。
    我目前的想法：数据先经过大小为1024个缓冲区和去直流处理部分。缓冲区时时刻刻保存最新的1024个数据，去直流处理部分是流水线设计，不需要缓冲区保存历史数据。接下来，
由自相关算法模块对来自去直流部分进行处理，得到这1024个数据的周期。接下来再经频率检测模块，发现两段1024个数据的周期（频率）相同，那么说明前段数据和本段数据是稳定的，
如果不同，那么说明不稳定，根据周期（频率）来调控ADC的采样率，也就是adc_clk。在这里，只需要让向div[2:0]输出信号即可，值1和2，分别对应2M和200K。adc_clk是由分频器对clk产生的，
所以adc_clk的上升沿和下降沿都是在clk的上升沿处改变的。
    由于缓冲区是实时更新的，所以此时只能访问到本段数据。如果数据是稳定的，那么就停止更新缓冲区，供其他模块读取。关于从数据采集到检测这个流程显然是需要一定时间的，不过我想主时钟这么快，
那么使用主时钟处理数据，应该能赶在数据自主更新前，让它停止更新缓冲区，那么这段数据应该就是有效的，把一个寄存器记为1。停止更新缓冲区这段时间，如果等待一段时间后，其他模块未把这个寄存器清零，
那么就主动清零，恢复更新缓冲区。不过，如果外部模块和内部模块不能同时操作一个寄存器，那么应该可以用一个影子寄存器什么的机制来解决。
所谓调控采样率就是设置输出引脚div[2:0]的值，2M和200K对应的值分别为1和2,经由分频器后就可以调整adc_clk的值。如果这次的1024个点和上个1024个点的周期（频率）一样，
那么就说明信号的频率是稳定的，那么就可以输出稳定信号，可以把这次的数据保存起来，让外部模块可以访问到这个缓冲区。
    从这这个想法，你也可以看出，我想要这个模块既能根据ADC采集的数据来调控采样率，又能让其他模块访问频率不变时的1024个数据。如果你有更优的设计也可以提出来，这其中你需要仔细考虑内部的通信机制
    
    更新一下【思路】：
        现在先使用去零检测法实时检测频率，同时使用FFT和IFFT（流水线）。之后再尝试自相关算法。




【过零检测模块】：
    我需要你写一个基于过零检测的频率检测模块，对来自去直流模块的有符号数据进行实时检测，流水线结构。数据采集是在adc_clk的上升沿，adc_clk也是模块的时钟域。
如果流水线就绪后，如果发现信号的频率没变，那么stable就输出为高电平。关于过零检测是否需要方向，我并不清楚
module freq_detector  #(
    parameter DATA_WIDTH = 12,       // 输入/输出数据位宽
)(
    input               adc_clk,            // ADC时钟域
    input               rst_n,              // 异步复位
    input signed [DATA_WIDTH-1:0] data_in,  // 去直流后的有符号数据
    output reg [DATA_WIDTH-1:0] period,     // 周期数据
    output reg          stable              // 频率稳定指示
);


【频率控制模块】
    我需要你设计一个频率控制模块，当输入引脚en为高电平时，表明信号稳定（频率没发生过变化），那么可以从[COUNTER_WIDTH-1:0]period获取信号的周期间隔，然后根据目前的分频系数和下面的表来判断是否要更换采样率。
更换采样率只需要设置[DIV_WIDTH-1:0] div这个分频系数即可。分频器的主频为24MHz，可以进行任意整数分频。切换频率时需要stable变为低电平
    period是个计数值，对应的是被测信号一个周期内200MHz时钟的计数次数，而不是信号的频率。
    频率区间范围    采样率          分频系数
        [1K,2K)     24K             1000
        [2K,4K)     48K             500
        [4K,8K)     96K             250
        [8K,16K)    192K            125
        [16K,32K)   384K->400K      62.5->60
        [32K,64K)   768K->800K      31.25->30
        [64K,128K)  1536K->1600K    15.625->15
接口列表如下
module freq_control #(
    parameter COUNTER_WIDTH = 18, 
    parameter DIV_WIDTH     = 12
) (
    input clk,
    input rst,
    input en,
    input [COUNTER_WIDTH-1:0] period,
    output reg [DIV_WIDTH-1:0] div
    output reg stable;
);


【缓冲模块】
    我需要你设计一个缓冲模块，作用是根据外部信号采集数据，供其他模块读取。现在我为你详细描述一下相关内容：
1，平时空闲状态，当stable为高电平并且signal_in为上升沿时，进入采样状态，在adc_clk上升沿时读取adc_data，存入缓冲区里
2，模块本身时钟域为clk，采用的是双缓冲区
3，采集过程中，如果stable为低电平，那么就立即回到空闲状态，表明数据无效。
4，采集过程中，其他模块也可能读取本模块的缓冲区。总之，双缓冲的设计需要处理相应的通信机制，以解决各种可能的冲突
5，其他模块与本模块通信是遵循自定义的内部时序的，时序如下：
    en上升沿时，可以根据state来判断是读时序还是写时序，此时读取[DATA_WIDTH-1:0]rd_data，读取的是地址
    读时序：当en处于下降沿，那么可以读取到的是数据
    写时序：当en为高电平，就可以写入数据到[DATA_WIDTH-1:0]wr_data，持续到en为低电平为止
6，更多细节和冲突你自行解决即可，你想把这个方案优化也行。
    主要是让你设计方案，把流程描述清楚，并不需要写代码。