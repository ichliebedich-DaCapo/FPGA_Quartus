【数据存储与处理】：
    我准备开发FPGA的模块来完成简易示波器的设计，接下来我们只讨论数据存储与处理模块。此前，我需要说明的是由于该模块是FPGA的内部模块，与FSMC接口模块连接，所以其与单片机的通信由FSMC协议转为内部通信协议。
现在这个协议为：在en上升沿时，根据state判断是读还是写，如果为高电平，那么就是写时序，反之为读时序。
读时序：当en为上升沿时，此时读取rd_data得到的是地址。en为下降沿时读取的是单片机传输的数据。
写时序：当en为上升沿时，此时读取rd_data得到的是地址，同时可以向wr_data写入数据，直到en拉低为止。
    此外，为了协调不同内部模块，把16位地址的高两位作为模块片选，也就是A[15:14]，另外把A[13:12]作为模块内部片选，其余地址作为模块内部不同组件的地址范围。
并且高位地址片选已经由FSMC接口模块完成了，并将其翻译为这里的en使能信号，也就是说en为高电平其实就是已经确定A[15:14]是当前模块的片选，因此只要考虑A[13:0]即可。
比如本模块的地址范围是[0x0000, 0x3FFF]，0x0000到0x0FFF是单片机能读取的ADC存储的数据（数据缓冲区），0x1000到0x1FFF是一些功能寄存器（供单片机读取，可自行根据需要扩充），
比如状态寄存器data_valid(0x1000)
    为了能让模块间能无缝衔接，ADC采样模块一直在采样，确保本模块可以随时对数据进行存储和处理，触发模块也是如此，一直在工作。
    而关于本模块，它的作用是读取ADC数据，然后经过存储和处理，供单片机读取。同时，我把它分成了高频低频两种模式：
高频模式：
    1，获取触发信号上升沿后，开始采样，采满一个缓冲区后，切换到另一个缓冲区，并把寄存器data_valid设置为1,data_valid可以被单片机访问和修改。
    2,单片机如果读取data_valid，发现它为1,那么就开始读取其中的数据，读取完成后把data_valid置为0。如果单片机暂停采样，FPGA也要把这个缓冲区采满之后再暂停，避免重新启动后，波形不连续。
    3,当写满另一个缓冲区后，如果data_valid为0,表明单片机已经读取完成了，那么可以切换另一个缓冲区，等待触发一次后再采满400个数据。如果还为1,那么即使触发一次，也不把数据存放到前一个缓冲区，同时为了防止长时间数据滞留，那么应该加入一个超时机制，等待200个clk。
低频模式：
    1，关于低频模式，需要舍弃触发条件，改为滚动更新。因为触发条件的存在是为了解决屏幕刷新的速度赶不上实际波形采样的变化速度，既然现在屏幕刷新远快于实际波形变化，那么就应该实时更新。
如果从高频模式切换为低频模式，那么应该清空缓冲区（切换为高频模式亦是如此，并且为了高性能，那么重置指针即可，以覆写的手段），然后一个一个存储数据。
    2，高频模式使用两个缓冲区，如果可以的话，低频模式要是能只复用一个高频模式使用过的一个缓冲区就好了，这样可以节省一个缓冲区。如果太难设计的话就算了。 
    3，低频模式下，由于单片机处理速度要高于FPGA采样速度，那么单片机只需要访问最新的数据即可。那么，那么需要维护一个指针用于单片机读取，
    

    前面实现的都是存储功能，接下来要实现的是数据处理功能。我需要实现FFT、找到峰峰值和找到峰峰值对应的间隔这三个功能，为了能高速处理，应使用流水线设计。FFT是依赖于存储的数据，与前面的存储数据差不多同步。
为了能让单片机可以无缝切换显示采样数据还是FFT，那么就需要把前面的data_valid逻辑稍微改一下，当数据存储过后，数据也处理完成了，那么才相当于数据真正完成了（顶替前文中数据采集完成这个单一条件）。
至于峰峰值和峰峰值对应的间隔，可以使用三个寄存器来存储。
我需要你使用状态机来实现，并且要高性能，更多细节可自行补充。如果其中某些方面你有更优的设计，可以按照你自己的想法改进。
所需接口列表如下，我需要你提供完整代码：
module data_storage_and_process #(
    parameter DATA_WIDTH  = 16,
    parameter ADC_WIDTH   = 12,
    parameter BUF_SIZE    = 400,
    parameter ADDR_WIDTH  = 12  // 2^12=4096 address space
)(
    // ================= 用户接口 =================
    input  logic                 clk,
    input  logic                 rst_n,
    input  logic [DATA_WIDTH-1:0] rd_data,
    output logic [DATA_WIDTH-1:0] wr_data,
    input  logic                 state,// 读写状态判断，高电平表示是写时序，低电平表示是读时序。
    input  logic                 en,
    // 触发模块接口
    input  logic                 trigger,
    // ADC采样模块接口
    input  logic [ADC_WIDTH-1:0] adc_data,
    input  logic                 adc_valid,// ADC数据是否有效（因为ADC采样速度远远低于FPGA的时钟），下降沿时表明可以采样。
    // 控制模块接口
    input  logic                 high_speed_mode,
    input  logic                 pause
);